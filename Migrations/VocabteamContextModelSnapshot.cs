// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using vocabteam.Models;

namespace vocabteam.Migrations
{
    [DbContext(typeof(VocabteamContext))]
    partial class VocabteamContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("vocabteam.Models.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnName("Description")
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnName("Name")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasComment("This is the Categories Table");
                });

            modelBuilder.Entity("vocabteam.Models.Entities.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Action")
                        .HasColumnName("Action")
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime");

                    b.Property<string>("ObjectName")
                        .HasColumnName("ObjectName")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Permissions");

                    b.HasComment("This is the Permission Table");
                });

            modelBuilder.Entity("vocabteam.Models.Entities.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstAnswer")
                        .HasColumnName("FirstAnswer")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SecondAnswer")
                        .HasColumnName("SecondAnswer")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ThirdAnswer")
                        .HasColumnName("ThirdAnswer")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("VocabularyId")
                        .HasColumnName("VocabularyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VocabularyId");

                    b.ToTable("Questions");

                    b.HasComment("This is the Questions Table");
                });

            modelBuilder.Entity("vocabteam.Models.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime");

                    b.Property<string>("DisplayName")
                        .HasColumnName("DisplayName")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Name")
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("guest");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasComment("This is the Role Table");
                });

            modelBuilder.Entity("vocabteam.Models.Entities.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("PermissionId")
                        .HasColumnName("PermissionId")
                        .HasColumnType("int");

                    b.Property<int?>("RoleId")
                        .HasColumnName("RoleId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissions");

                    b.HasComment("This is the RolePermissions Table");
                });

            modelBuilder.Entity("vocabteam.Models.Entities.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("CategoryId")
                        .HasColumnName("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime");

                    b.Property<int>("OrdinalNumber")
                        .HasColumnName("OrdinalNumber")
                        .HasColumnType("int");

                    b.Property<float>("Result")
                        .HasColumnName("Result")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("UserId")
                        .HasColumnName("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Tests");

                    b.HasComment("This is the Tests Table");
                });

            modelBuilder.Entity("vocabteam.Models.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("AvatarUrl")
                        .HasColumnName("AvatarUrl")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasColumnName("Email")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Password")
                        .HasColumnName("Password")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Token")
                        .HasColumnName("Token")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Username")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Username")
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("account");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasComment("This is the User Table");
                });

            modelBuilder.Entity("vocabteam.Models.Entities.UserPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("PermissionId")
                        .HasColumnName("PermissionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("UserId")
                        .HasColumnName("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPermissions");

                    b.HasComment("This is the UserPermissions Table");
                });

            modelBuilder.Entity("vocabteam.Models.Entities.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("RoleId")
                        .HasColumnName("RoleId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("UserId")
                        .HasColumnName("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");

                    b.HasComment("This is the UserRoles Table");
                });

            modelBuilder.Entity("vocabteam.Models.Entities.Vocabulary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("AudioUrl")
                        .HasColumnName("AudioUrl")
                        .HasColumnType("text");

                    b.Property<int?>("CategoryId")
                        .HasColumnName("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Definition")
                        .HasColumnName("Definition")
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnName("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Meaning")
                        .HasColumnName("Meaning")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Sentence")
                        .HasColumnName("Sentence")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Word")
                        .HasColumnName("Word")
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Vocabularies");

                    b.HasComment("This is the Vocabularies Table");
                });

            modelBuilder.Entity("vocabteam.Models.Entities.Question", b =>
                {
                    b.HasOne("vocabteam.Models.Entities.Vocabulary", "Vocabulary")
                        .WithMany("Questions")
                        .HasForeignKey("VocabularyId")
                        .HasConstraintName("FK_Questions_Vocabularies")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("vocabteam.Models.Entities.RolePermission", b =>
                {
                    b.HasOne("vocabteam.Models.Entities.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .HasConstraintName("FK_RolePermissions_Permissions")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("vocabteam.Models.Entities.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_RolePermissions_Roles")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("vocabteam.Models.Entities.Test", b =>
                {
                    b.HasOne("vocabteam.Models.Entities.Category", "Category")
                        .WithMany("Tests")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_Tests_Categories")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("vocabteam.Models.Entities.User", "User")
                        .WithMany("Tests")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Tests_Users")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("vocabteam.Models.Entities.UserPermission", b =>
                {
                    b.HasOne("vocabteam.Models.Entities.Permission", "Permission")
                        .WithMany("UserPermissions")
                        .HasForeignKey("PermissionId")
                        .HasConstraintName("FK_UserPermissions_Permissions")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("vocabteam.Models.Entities.User", "User")
                        .WithMany("UserPermissions")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserPermissions_Users")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("vocabteam.Models.Entities.UserRole", b =>
                {
                    b.HasOne("vocabteam.Models.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_UserRoles_Roles")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("vocabteam.Models.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserRoles_Users")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("vocabteam.Models.Entities.Vocabulary", b =>
                {
                    b.HasOne("vocabteam.Models.Entities.Category", "Category")
                        .WithMany("Vocabularies")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_Vocabularies_Categories")
                        .OnDelete(DeleteBehavior.SetNull);
                });
#pragma warning restore 612, 618
        }
    }
}
